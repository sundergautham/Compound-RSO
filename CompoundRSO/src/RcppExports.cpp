// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// f_x_cpp
arma::rowvec f_x_cpp(arma::rowvec x, std::string model_order, StringVector C_dtype, IntegerVector me_index, IntegerVector qe_index, Nullable<List> two_fi_index_);
RcppExport SEXP _CompoundRSO_f_x_cpp(SEXP xSEXP, SEXP model_orderSEXP, SEXP C_dtypeSEXP, SEXP me_indexSEXP, SEXP qe_indexSEXP, SEXP two_fi_index_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_order(model_orderSEXP);
    Rcpp::traits::input_parameter< StringVector >::type C_dtype(C_dtypeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type me_index(me_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qe_index(qe_indexSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type two_fi_index_(two_fi_index_SEXP);
    rcpp_result_gen = Rcpp::wrap(f_x_cpp(x, model_order, C_dtype, me_index, qe_index, two_fi_index_));
    return rcpp_result_gen;
END_RCPP
}
// rank2_inverse_cpp
arma::mat rank2_inverse_cpp(arma::rowvec x, arma::rowvec x_i, arma::mat D);
RcppExport SEXP _CompoundRSO_rank2_inverse_cpp(SEXP xSEXP, SEXP x_iSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(rank2_inverse_cpp(x, x_i, D));
    return rcpp_result_gen;
END_RCPP
}
// v_x_cpp
double v_x_cpp(arma::colvec x_i, arma::colvec x_j, arma::mat D);
RcppExport SEXP _CompoundRSO_v_x_cpp(SEXP x_iSEXP, SEXP x_jSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type x_j(x_jSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(v_x_cpp(x_i, x_j, D));
    return rcpp_result_gen;
END_RCPP
}
// delta_D_cpp
double delta_D_cpp(arma::rowvec x, arma::rowvec x_i, arma::mat D);
RcppExport SEXP _CompoundRSO_delta_D_cpp(SEXP xSEXP, SEXP x_iSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_D_cpp(x, x_i, D));
    return rcpp_result_gen;
END_RCPP
}
// coor_exch_D_Bayes
List coor_exch_D_Bayes(arma::mat x, arma::mat x_matrix, List C, std::string model_order, StringVector C_dtype, int freeze_rows, arma::mat K, IntegerVector me_index, IntegerVector qe_index, List two_fi_index, std::string type, std::string design, bool telescoping);
RcppExport SEXP _CompoundRSO_coor_exch_D_Bayes(SEXP xSEXP, SEXP x_matrixSEXP, SEXP CSEXP, SEXP model_orderSEXP, SEXP C_dtypeSEXP, SEXP freeze_rowsSEXP, SEXP KSEXP, SEXP me_indexSEXP, SEXP qe_indexSEXP, SEXP two_fi_indexSEXP, SEXP typeSEXP, SEXP designSEXP, SEXP telescopingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_matrix(x_matrixSEXP);
    Rcpp::traits::input_parameter< List >::type C(CSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_order(model_orderSEXP);
    Rcpp::traits::input_parameter< StringVector >::type C_dtype(C_dtypeSEXP);
    Rcpp::traits::input_parameter< int >::type freeze_rows(freeze_rowsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type me_index(me_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qe_index(qe_indexSEXP);
    Rcpp::traits::input_parameter< List >::type two_fi_index(two_fi_indexSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type design(designSEXP);
    Rcpp::traits::input_parameter< bool >::type telescoping(telescopingSEXP);
    rcpp_result_gen = Rcpp::wrap(coor_exch_D_Bayes(x, x_matrix, C, model_order, C_dtype, freeze_rows, K, me_index, qe_index, two_fi_index, type, design, telescoping));
    return rcpp_result_gen;
END_RCPP
}
// coor_exch_I_augment
List coor_exch_I_augment(arma::mat x, arma::mat x_matrix, List C, std::string model_order, StringVector C_dtype, arma::mat W, int freeze_rows, IntegerVector me_index, IntegerVector qe_index, List two_fi_index, std::string type, bool telescoping);
RcppExport SEXP _CompoundRSO_coor_exch_I_augment(SEXP xSEXP, SEXP x_matrixSEXP, SEXP CSEXP, SEXP model_orderSEXP, SEXP C_dtypeSEXP, SEXP WSEXP, SEXP freeze_rowsSEXP, SEXP me_indexSEXP, SEXP qe_indexSEXP, SEXP two_fi_indexSEXP, SEXP typeSEXP, SEXP telescopingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_matrix(x_matrixSEXP);
    Rcpp::traits::input_parameter< List >::type C(CSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_order(model_orderSEXP);
    Rcpp::traits::input_parameter< StringVector >::type C_dtype(C_dtypeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type freeze_rows(freeze_rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type me_index(me_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qe_index(qe_indexSEXP);
    Rcpp::traits::input_parameter< List >::type two_fi_index(two_fi_indexSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type telescoping(telescopingSEXP);
    rcpp_result_gen = Rcpp::wrap(coor_exch_I_augment(x, x_matrix, C, model_order, C_dtype, W, freeze_rows, me_index, qe_index, two_fi_index, type, telescoping));
    return rcpp_result_gen;
END_RCPP
}
// coor_exch_compound
List coor_exch_compound(arma::mat x, arma::mat x_matrix, List C, std::string model_order, StringVector C_dtype, arma::mat W, int freeze_rows, arma::mat x_matrix_Dopt, arma::mat x_matrix_Iopt, double w, arma::mat K, IntegerVector me_index, IntegerVector qe_index, List two_fi_index, IntegerVector me_index_daug, IntegerVector qe_index_daug, List two_fi_index_daug, std::string D_opt_type, bool telescoping);
RcppExport SEXP _CompoundRSO_coor_exch_compound(SEXP xSEXP, SEXP x_matrixSEXP, SEXP CSEXP, SEXP model_orderSEXP, SEXP C_dtypeSEXP, SEXP WSEXP, SEXP freeze_rowsSEXP, SEXP x_matrix_DoptSEXP, SEXP x_matrix_IoptSEXP, SEXP wSEXP, SEXP KSEXP, SEXP me_indexSEXP, SEXP qe_indexSEXP, SEXP two_fi_indexSEXP, SEXP me_index_daugSEXP, SEXP qe_index_daugSEXP, SEXP two_fi_index_daugSEXP, SEXP D_opt_typeSEXP, SEXP telescopingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_matrix(x_matrixSEXP);
    Rcpp::traits::input_parameter< List >::type C(CSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_order(model_orderSEXP);
    Rcpp::traits::input_parameter< StringVector >::type C_dtype(C_dtypeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type freeze_rows(freeze_rowsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_matrix_Dopt(x_matrix_DoptSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_matrix_Iopt(x_matrix_IoptSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type me_index(me_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qe_index(qe_indexSEXP);
    Rcpp::traits::input_parameter< List >::type two_fi_index(two_fi_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type me_index_daug(me_index_daugSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qe_index_daug(qe_index_daugSEXP);
    Rcpp::traits::input_parameter< List >::type two_fi_index_daug(two_fi_index_daugSEXP);
    Rcpp::traits::input_parameter< std::string >::type D_opt_type(D_opt_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type telescoping(telescopingSEXP);
    rcpp_result_gen = Rcpp::wrap(coor_exch_compound(x, x_matrix, C, model_order, C_dtype, W, freeze_rows, x_matrix_Dopt, x_matrix_Iopt, w, K, me_index, qe_index, two_fi_index, me_index_daug, qe_index_daug, two_fi_index_daug, D_opt_type, telescoping));
    return rcpp_result_gen;
END_RCPP
}
// discW2_update_cpp
arma::mat discW2_update_cpp(arma::mat X, bool update, arma::mat disc_matrix, bool rescale, int i, int j, double xij_new);
RcppExport SEXP _CompoundRSO_discW2_update_cpp(SEXP XSEXP, SEXP updateSEXP, SEXP disc_matrixSEXP, SEXP rescaleSEXP, SEXP iSEXP, SEXP jSEXP, SEXP xij_newSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type update(updateSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type disc_matrix(disc_matrixSEXP);
    Rcpp::traits::input_parameter< bool >::type rescale(rescaleSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type xij_new(xij_newSEXP);
    rcpp_result_gen = Rcpp::wrap(discW2_update_cpp(X, update, disc_matrix, rescale, i, j, xij_new));
    return rcpp_result_gen;
END_RCPP
}
// discM2_update_cpp
List discM2_update_cpp(arma::mat X, bool update, arma::mat disc_matrix, arma::colvec disc_vector, bool rescale, int i, int j, double xij_new);
RcppExport SEXP _CompoundRSO_discM2_update_cpp(SEXP XSEXP, SEXP updateSEXP, SEXP disc_matrixSEXP, SEXP disc_vectorSEXP, SEXP rescaleSEXP, SEXP iSEXP, SEXP jSEXP, SEXP xij_newSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type update(updateSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type disc_matrix(disc_matrixSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type disc_vector(disc_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type rescale(rescaleSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type xij_new(xij_newSEXP);
    rcpp_result_gen = Rcpp::wrap(discM2_update_cpp(X, update, disc_matrix, disc_vector, rescale, i, j, xij_new));
    return rcpp_result_gen;
END_RCPP
}
// coor_exch_compound_unif
List coor_exch_compound_unif(arma::mat x, arma::mat x_matrix, List C, std::string model_order, StringVector C_dtype, int freeze_rows, arma::mat x_matrix_Dopt, arma::mat x_unifopt, std::string unif_crit, double w, arma::mat K, IntegerVector me_index_daug, IntegerVector qe_index_daug, List two_fi_index_daug, bool telescoping);
RcppExport SEXP _CompoundRSO_coor_exch_compound_unif(SEXP xSEXP, SEXP x_matrixSEXP, SEXP CSEXP, SEXP model_orderSEXP, SEXP C_dtypeSEXP, SEXP freeze_rowsSEXP, SEXP x_matrix_DoptSEXP, SEXP x_unifoptSEXP, SEXP unif_critSEXP, SEXP wSEXP, SEXP KSEXP, SEXP me_index_daugSEXP, SEXP qe_index_daugSEXP, SEXP two_fi_index_daugSEXP, SEXP telescopingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_matrix(x_matrixSEXP);
    Rcpp::traits::input_parameter< List >::type C(CSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_order(model_orderSEXP);
    Rcpp::traits::input_parameter< StringVector >::type C_dtype(C_dtypeSEXP);
    Rcpp::traits::input_parameter< int >::type freeze_rows(freeze_rowsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_matrix_Dopt(x_matrix_DoptSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_unifopt(x_unifoptSEXP);
    Rcpp::traits::input_parameter< std::string >::type unif_crit(unif_critSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type me_index_daug(me_index_daugSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qe_index_daug(qe_index_daugSEXP);
    Rcpp::traits::input_parameter< List >::type two_fi_index_daug(two_fi_index_daugSEXP);
    Rcpp::traits::input_parameter< bool >::type telescoping(telescopingSEXP);
    rcpp_result_gen = Rcpp::wrap(coor_exch_compound_unif(x, x_matrix, C, model_order, C_dtype, freeze_rows, x_matrix_Dopt, x_unifopt, unif_crit, w, K, me_index_daug, qe_index_daug, two_fi_index_daug, telescoping));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _CompoundRSO_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _CompoundRSO_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _CompoundRSO_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _CompoundRSO_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CompoundRSO_f_x_cpp", (DL_FUNC) &_CompoundRSO_f_x_cpp, 6},
    {"_CompoundRSO_rank2_inverse_cpp", (DL_FUNC) &_CompoundRSO_rank2_inverse_cpp, 3},
    {"_CompoundRSO_v_x_cpp", (DL_FUNC) &_CompoundRSO_v_x_cpp, 3},
    {"_CompoundRSO_delta_D_cpp", (DL_FUNC) &_CompoundRSO_delta_D_cpp, 3},
    {"_CompoundRSO_coor_exch_D_Bayes", (DL_FUNC) &_CompoundRSO_coor_exch_D_Bayes, 13},
    {"_CompoundRSO_coor_exch_I_augment", (DL_FUNC) &_CompoundRSO_coor_exch_I_augment, 12},
    {"_CompoundRSO_coor_exch_compound", (DL_FUNC) &_CompoundRSO_coor_exch_compound, 19},
    {"_CompoundRSO_discW2_update_cpp", (DL_FUNC) &_CompoundRSO_discW2_update_cpp, 7},
    {"_CompoundRSO_discM2_update_cpp", (DL_FUNC) &_CompoundRSO_discM2_update_cpp, 8},
    {"_CompoundRSO_coor_exch_compound_unif", (DL_FUNC) &_CompoundRSO_coor_exch_compound_unif, 15},
    {"_CompoundRSO_rcpparma_hello_world", (DL_FUNC) &_CompoundRSO_rcpparma_hello_world, 0},
    {"_CompoundRSO_rcpparma_outerproduct", (DL_FUNC) &_CompoundRSO_rcpparma_outerproduct, 1},
    {"_CompoundRSO_rcpparma_innerproduct", (DL_FUNC) &_CompoundRSO_rcpparma_innerproduct, 1},
    {"_CompoundRSO_rcpparma_bothproducts", (DL_FUNC) &_CompoundRSO_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_CompoundRSO(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
